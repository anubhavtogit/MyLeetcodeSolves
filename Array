Leetcode Problem-26


class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int el=0;
        vector<int>ve;
        ve.push_back(nums[el]);
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=nums[el]){
                ve.push_back(nums[i]);
                el=i;
            }
        }
        for(int i=0;i<ve.size();i++){
            nums[i]=ve[i];
        }
        return ve.size();
    }
};

1st approach

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int el=0,index=0;
        //vector<int>ve;
        //ve.push_back(nums[el]);
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=nums[el]){
                //ve.push_back(nums[i]);
                el=i;
                nums[++index]=nums[i];
            }
        }
       /* for(int i=0;i<ve.size();i++){
            nums[i]=ve[i];
        }
        return ve.size();*/
        return index+1;
    }
};

fastest approach but memory is not optimized

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int index=0;
        //vector<int>ve;
        //ve.push_back(nums[el]);
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]!=nums[i+1]){
                //ve.push_back(nums[i]);
               // el=i;
                nums[++index]=nums[i+1];
            }
        }
       /* for(int i=0;i<ve.size();i++){
            nums[i]=ve[i];
        }
        return ve.size();*/
        return index+1;
    }
};

Thats the most optimized solution i can make

